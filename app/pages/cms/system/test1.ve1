<!-- <script lang="ts" setup>


import type { IMenuModel, IMenuModelQuery } from '~/api/base/index.type'
import type { FormInstance, FormRules } from 'element-plus'
import dayjs from 'dayjs'
import { computed, onMounted, reactive, ref } from 'vue'
import { $endApi } from '~/api/base'

import { useCrud } from '~/composables/cms/Crud'

// 定义页面元信息
definePageMeta({
  name: '菜单管理',
  layout: 'cms',
})


function useMenu() {
  const {
    list: menuList,
    queryParams,
    dialogOptions,
    fetch,
    create,
    update,
    delete: deleteMenu,
    refresh,
    openDialog
  } = useCrud<IMenuModel>({
    apiPath: 'system/menus',
    defaultQuery: {
      type: undefined,
      name: '',
      path: ''
    },
    defaultForm: {
      type: 0,
      parentId: -1
    }
  })

  // 菜单特定逻辑
  const menuWithRoot = computed(() => ([{
    id: -1,
    name: '根目录',
    children: [...menuList.value]
  }]))

  return {
    menuList,
    queryParams,
    dialogOptions,
    fetch,
    create,
    update,
    delete: deleteMenu,
    refresh,
    openDialog,
    menuWithRoot
  }
}
const {
  menuList,
  queryParams: formInline,
  dialogOptions,
  fetch,
  create,
  update,
  delete: deleteMenu,
  refresh,
  openDialog,
  menuWithRoot
} = useMenu()



// const { menuList, fetch, create, update, delete: deleteMenu } = useMenu()
// 初始化加载
onMounted(() => {
  fetch()
})

// // 查询参数
// const formInline = reactive<Partial<IMenuModel>>({
//   type: undefined,
//   name: '',
//   path: '',
// })


// // 重置搜索表单
// function handleReset() {
//   formInline.type = undefined
//   formInline.name = ''
//   formInline.path = ''
// }

// interface DialogOptions {
//   visible: boolean
//   mode: 'new' | 'edit' | 'read'
//   data: Partial<IMenuModel>
//   loading: boolean
// }

// // 对话框配置
// const dialogOptions = reactive<DialogOptions>({
//   visible: false,
//   mode: 'new',
//   data: {},
//   loading: false,
// })

// // 打开对话框
// function handleDialog(data: IMenuModel, mode: 'new' | 'edit') {
//   dialogOptions.mode = mode
//   dialogOptions.visible = true
//   dialogOptions.data = mode === 'new' ? { type: 0, parentId: -1 } : { ...data }
// }

// // 表单验证规则
// const rules = reactive<Partial<Record<keyof IMenuModelQuery, any>>>({
//   type: {
//     conditions: [
//       { required: true, message: '请选择菜单类型', trigger: 'blur' },
//     ],
//   },
//   name: {
//     conditions: [
//       { required: true, message: '请输入菜单名称', trigger: 'blur' },
//     ],
//   },
//   parentId: {
//     conditions: [
//       { required: true, message: '请选择上级节点', trigger: 'blur' },
//     ],
//   },
//   path: {
//     conditions: [
//       { required: true, message: '请输入路由地址', trigger: 'blur' },
//     ],
//   },
//   permission: {
//     conditions: [
//       { required: true, message: '请输入权限', trigger: 'blur' },
//     ],
//   },
//   orderNo: {
//     conditions: [
//       { required: true, message: '请输入排序', trigger: 'blur' },
//     ]
//   }
// })

// // 计算最终的表单验证规则
// const compRules = computed<FormRules<IMenuModelQuery>>(() => {
//   return Object.fromEntries(
//     Object.entries(rules).map(([key, value]) => [key, value.conditions]),
//   )
// })

// // 表单引用
// const ruleFormRef = ref<FormInstance>()

// // 提交表单
// async function submitForm(formEl: FormInstance | undefined) {
//   if (!formEl)
//     return
//   await formEl.validate(async (valid) => {
//     if (!valid)
//       return
//     const data = dialogOptions.data
//     if (data.parentId === -1)
//       data.parentId = undefined
//     dialogOptions.loading = true
//     let res
//     if (dialogOptions.mode === 'new') {
//       await create(dialogOptions.data)
//     }
//     else {
//       const { data: update } = await $endApi.v1.cms.menu.update(data.id!, data)
//       res = update
//     }
//     if (res.value && res.value.code === 200) {
//       ElMessage.success(`${dialogOptions.mode === 'new' ? '添加' : '修改'}成功！`)
//       dialogOptions.visible = false
//       refresh()
//     }
//     else {
//       ElMessage.error(res.value?.message ?? `${dialogOptions.mode === 'new' ? '添加' : '修改'}失败！`)
//     }
//     dialogOptions.loading = false
//   })
// }

// // 重置表单
// function resetForm(formEl: FormInstance | undefined) {
//   if (formEl)
//     formEl.resetFields()
// }

// // 删除菜单
// async function handleDelete(id: number, data: IMenuModel) {
//   const typeText = data.type === 0 ? '目录' : data.type === 1 ? '菜单' : '权限'
//   ElMessageBox.confirm(
//     `你确定要删除${typeText} ${data.name} #${id} 吗？删除后这个${typeText}永久无法找回。`,
//     '确认删除',
//     {
//       confirmButtonText: '取消',
//       cancelButtonText: '确定删除',
//       type: 'error',
//     },
//   )
//     .then(() => {
//       ElMessage({
//         type: 'success',
//         message: `已取消删除${typeText}！`,
//       })
//     })
//     .catch(async () => {
//       const { data: res } = await $endApi.v1.cms.menu.delete(id)
//       if (res.value?.code !== 200) {
//         ElMessage.error('删除失败！')
//         return
//       }
//       refresh()
//       ElNotification({
//         title: 'Info',
//         message: `你永久删除了${typeText} ${data.name} 及其相关数据！`,
//         type: 'info',
//       })
//     })
// }


// const menuWithRoot = computed(() => ([{ id: -1, name: '根目录', children: [...menuList.value] }]))
</script>

<template>
  <ClientOnly>
    <el-container class="CmsRole">
      <el-main>
        <!-- 搜索表单 -->
        <el-form :inline="true" :model="formInline">
          <el-form-item label="用户名">
            <el-input v-model="formInline.type" minlength="4" placeholder="搜索类型" clearable />
          </el-form-item>
          <el-form-item label="邮箱">
            <el-input v-model="formInline.name" placeholder="搜索名称" clearable />
          </el-form-item>
          <el-form-item label="手机号">
            <el-input v-model="formInline.path" placeholder="搜索组件地址" clearable />
          </el-form-item>
          <!-- <el-form-item label="备注">
            <el-input v-model="formInline.remark" placeholder="搜索备注" clearable />
          </el-form-item> -->
          <el-form-item>
            <el-button @click="handleReset">
              重置
            </el-button>
            <el-button type="primary" @click="fetch(formInline)">
              查询
            </el-button>
            <el-button type="success" @click="handleDialog({}, 'new')">
              新建菜单
            </el-button>
          </el-form-item>
        </el-form>

        <!-- 菜单列表 -->
        <el-table v-if="menuList" table-layout="auto" row-key="id" border :data="menuList" style="width: 100%">
          <el-table-column label="序号" prop="id" />
          <el-table-column label="名称" prop="name" />
          <el-table-column label="类型">
            <template #default="{ row }">
              <el-tag v-if="row.type === 0" type="warning">
                目录
              </el-tag>
              <el-tag v-else-if="row.type === 1" type="success">
                菜单
              </el-tag>
              <el-tag v-else type="danger">
                权限
              </el-tag>
            </template>
          </el-table-column>
          <el-table-column label="路由" prop="path" />
          <el-table-column label="权限标识" prop="permission" />
          <el-table-column label="更新时间">
            <template #default="{ row }">
              {{ $dayjs(row.updatedAt).format('YYYY-MM-DD HH:mm:ss') }}
            </template>
          </el-table-column>
          <el-table-column fixed="right" label="操作">
            <template #default="{ row }">
              <el-button plain text size="small" @click="handleDialog(row, 'edit')">
                编辑
              </el-button>
              <el-button plain text size="small" type="danger" @click="handleDelete(row.id, row)">
                删除
              </el-button>
            </template>
          </el-table-column>
        </el-table>
      </el-main>

      <!-- 对话框 -->
      <el-drawer v-model="dialogOptions.visible" :close-on-click-modal="false" :close-on-press-escape="false">
        <template #header>
          <h4>
            <span v-if="dialogOptions.mode === 'new'">新建</span>
            <span v-else>编辑</span>菜单信息
            <span v-if="dialogOptions.data.id" mx-4 op-50>#{{ dialogOptions.data.id }}</span>
          </h4>
        </template>
        <template #default>
          <el-form ref="ruleFormRef" :disabled="dialogOptions.loading" style="max-width: 600px"
            :model="dialogOptions.data" :rules="compRules" label-width="auto" class="demo-ruleForm" status-icon>
            <el-form-item label="菜单类型" prop="type">
              <el-radio-group v-model="dialogOptions.data.type">
                <el-radio-button :value="0">
                  目录
                </el-radio-button>
                <el-radio-button :value="1">
                  菜单
                </el-radio-button>
                <el-radio-button :value="2">
                  权限
                </el-radio-button>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="节点名称" prop="name">
              <el-input v-model="dialogOptions.data.name" placeholder="请输入节点名称..." />
            </el-form-item>
            <el-form-item label="上级节点" prop="parentId">
              <el-tree-select v-model="dialogOptions.data.parentId" default-expand-all
                :props="{ label: 'name', value: 'id' }" :data="menuWithRoot" check-strictly :render-after-expand="false"
                placeholder="请选择上级节点..." />

            </el-form-item>
            <el-form-item label="路由地址" prop="path">
              <el-input v-model="dialogOptions.data.path" placeholder="请输入路由地址..." />
            </el-form-item>
            <el-form-item label="权限" prop="permission">
              <el-input v-model="dialogOptions.data.permission" placeholder="请输入权限..." />
            </el-form-item>
            <el-form-item label="排序" prop="orderNo">
              <el-input v-model="dialogOptions.data.orderNo" placeholder="...orderNo" />
            </el-form-item>
            <el-form-item v-show="dialogOptions.data.type !== 2" label="节点图标" prop="icon">
              <el-input v-model="dialogOptions.data.icon" placeholder="请输入节点图标..." />
            </el-form-item>

            <el-form-item v-if="dialogOptions.data.type !== 2" label="是否外链" prop="isExt">
              <el-radio-group v-model="dialogOptions.data.isExt">
                <el-radio-button :value="false">
                  否
                </el-radio-button>
                <el-radio-button :value="true">
                  是
                </el-radio-button>
              </el-radio-group>
            </el-form-item>
            <el-form-item v-if="dialogOptions.data.type === 1" label="是否缓存" prop="keepAlive">
              <el-radio-group v-model="dialogOptions.data.keepAlive">
                <el-radio-button :value="0">
                  否
                </el-radio-button>
                <el-radio-button :value="1">
                  是
                </el-radio-button>
              </el-radio-group>
            </el-form-item>
            <el-form-item v-if="dialogOptions.data.type !== 2" label="是否显示" prop="show">
              <el-radio-group v-model="dialogOptions.data.show">
                <el-radio-button :value="0">
                  否
                </el-radio-button>
                <el-radio-button :value="1">
                  是
                </el-radio-button>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="状态" prop="status">
              <el-radio-group v-model="dialogOptions.data.status">
                <el-radio-button :value="0">
                  否
                </el-radio-button>
                <el-radio-button :value="1">
                  是
                </el-radio-button>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </template>

        <template #footer>
          <div style="flex: auto">
            <template v-if="dialogOptions.mode === 'read'">
              <el-button @click="dialogOptions.visible = false">
                关闭
              </el-button>
            </template>
            <template v-else>
              <el-button @click="dialogOptions.visible = false">
                取消
              </el-button>
              <el-button @click="resetForm(ruleFormRef)">
                重置
              </el-button>
              <el-button :loading="dialogOptions.loading" type="primary" @click="submitForm(ruleFormRef)">
                {{ dialogOptions.mode !== 'new' ? "修改" : "新增" }}
              </el-button>
            </template>
          </div>
        </template>
      </el-drawer>
    </el-container>
  </ClientOnly>
</template>

<style scoped></style> -->
