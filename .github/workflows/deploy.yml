name: 构建与部署

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  # 添加手动触发选项
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # 移除条件限制，使本地也能运行
    # if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.0

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.9.0
          cache: pnpm

      - name: 安装依赖
        run: pnpm install

      # - name: 代码检查
      #   run: pnpm lint

      # - name: 类型检查
      #   run: pnpm typecheck

      - name: 构建项目
        run: pnpm build
        env:
          NODE_ENV: production
          NITRO_PRESET: node

      # 添加检查构建产物的步骤
      - name: 检查构建产物
        run: |
          echo "检查构建产物..."
          ls -la .output/
          ls -la .output/server/
          test -f .output/server/index.mjs || echo "警告：入口文件不存在！"

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: water-dashboard:${{ github.ref_name }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 保存 Docker 镜像
        run: |
          docker save water-dashboard:${{ github.ref_name }} > water-dashboard.tar

      - name: 部署到服务器
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: water-dashboard.tar
          target: /tmp

      - name: 在服务器上启动容器
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /tmp
            docker load < water-dashboard.tar
            docker stop water-app || true
            docker rm water-app || true

            # 使用更多环境变量启动容器，特别注意 HOST 设置
            docker run -d --name water-app \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e NITRO_PRESET=node \
              -e HOST=0.0.0.0 \
              -e PORT=3000 \
              --restart always \
              water-dashboard:${{ github.ref_name }}

            # 等待容器启动
            sleep 10

            # 检查容器状态和日志
            echo "容器状态:"
            docker ps -a | grep water-app
            echo "容器日志:"
            docker logs water-app

            # 检查网络配置
            echo "网络配置:"
            docker exec water-app ip addr
            docker exec water-app netstat -tulpn || echo "netstat 不可用"

            # 使用不同方式测试连接
            echo "测试应用连接 (localhost):"
            docker exec water-app curl -v http://localhost:3000 || echo "无法连接到 localhost"

            echo "测试应用连接 (127.0.0.1):"
            docker exec water-app curl -v http://127.0.0.1:3000 || echo "无法连接到 127.0.0.1"

            echo "测试应用连接 (0.0.0.0):"
            docker exec water-app curl -v http://0.0.0.0:3000 || echo "无法连接到 0.0.0.0"

            # 检查容器内进程
            echo "容器内进程:"
            docker exec water-app ps aux

            rm water-dashboard.tar
