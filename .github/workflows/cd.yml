name: 持续部署

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
  

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .output

      # 确保所需文件在正确位置
      - name: 准备文件
        run: |
          # 确保目录存在
          mkdir -p docker/prod
          # 复制 ecosystem.config.cjs 到构建目录
          cp ecosystem.config.cjs docker/prod/
          # 复制 .output 到构建目录
          cp -r .output docker/prod/

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/prod/Dockerfile
          push: false
          tags: water-dashboard:${{ github.ref_name }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 保存 Docker 镜像和配置文件
        run: |
          docker save water-dashboard:${{ github.ref_name }} > water-dashboard.tar
          echo "TAG=${{ github.ref_name }}" > docker/prod/.env

      - name: 部署到服务器
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: water-dashboard.tar,docker/prod/docker-compose.yml,docker/prod/.env.prod,ecosystem.config.cjs
          target: /app/water-dashboard

      - name: 在服务器上启动容器
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /app/water-dashboard
            docker load < water-dashboard.tar
            
            # 使用 Docker Compose 启动应用
            docker compose -f docker/prod/docker-compose.yml down
            docker compose -f docker/prod/docker-compose.yml up -d
            
            # 等待容器启动
            sleep 10
            
            # 检查容器状态
            docker compose ps
            
            # 检查应用是否正常启动
            echo "检查外部访问:"
            curl -I http://localhost:4000 || echo "外部访问失败"
            
            # 检查容器日志
            docker compose logs
            
            # 清理文件
            rm water-dashboard.tar
