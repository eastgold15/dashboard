<script setup lang="ts">
import {
  Document,
  Menu as IconMenu,
  Location,
  Setting,
} from '@element-plus/icons-vue'
import { h, ref } from 'vue' // 引入 ref 用于响应式变量

function handleOpen(key: string, keyPath: string[]) {
  console.log(key, keyPath)
}
function handleClose(key: string, keyPath: string[]) {
  console.log(key, keyPath)
}

const user = useUserStore()
const menulist = user.getMenuList()
console.log(menulist)
// 定义一个响应式变量来控制菜单的折叠状态
const isCollapsed = ref(false)
// 切换折叠状态的函数
const toggleCollapse = () => {
  isCollapsed.value = !isCollapsed.value
}
</script>

<template>
  <div class="h-100vh w-100%">
    <ClientOnly>
      <el-container class="h-100vh w-100%">
        <el-header>
          <!-- 添加一个按钮用于切换菜单折叠状态 -->
          <el-button @click="toggleCollapse">
            <el-icon>
              <IconMenu />
            </el-icon>
          </el-button>
          cms菜单权限
        </el-header>
        <el-container>
          <el-aside :width="isCollapsed ? '64px' : '200px'">
            <!-- 使用 collapse 属性控制菜单的折叠状态 -->
            <el-menu default-active="2" class="el-menu-vertical-demo" @open="handleOpen" @close="handleClose"
              :collapse="isCollapsed">
              <!-- 动态渲染菜单 -->
              <template v-for="menu in menulist" :key="menu.id">
                <!-- 修改 :key 绑定为 menu.id -->

                <el-sub-menu v-if="menu.children" :index="menu.path">
                  <!-- 修改 :index 绑定为 menu.path -->
                  <template #title>
                    <el-icon>
                      <!-- 修改为根据新的 icon 格式动态创建组件 -->
                      <component :is="() => h('i', { class: menu.meta?.icon })" />
                    </el-icon>
                    <!-- 当菜单未折叠时显示菜单标题 -->
                    <span v-if="!isCollapsed">{{ menu.meta?.title }}</span>
                  </template>
                  <!-- 渲染子菜单 -->
                  <el-menu-item v-for="subMenu in menu.children" :key="subMenu.id" :index="subMenu.path">
                    <!-- 修改 :key 和 :index 绑定 -->
                    <NuxtLink :to="subMenu.path">
                      <el-icon>
                        <!-- 修改为根据新的 icon 格式动态创建组件 -->
                        <component :is="() => h('i', { class: subMenu.meta?.icon })" />
                      </el-icon>
                      <!-- 当菜单未折叠时显示子菜单标题 -->
                      <span v-if="!isCollapsed">{{ subMenu.meta?.title }}</span>
                    </NuxtLink>
                  </el-menu-item>
                </el-sub-menu>

                <el-menu-item v-else :index="menu.path" :disabled="menu.meta?.status !== 1">
                  <!-- 修改 :index 绑定和 disabled 条件 -->
                  <NuxtLink :to="menu.path">
                    <el-icon>
                      <!-- 修改为根据新的 icon 格式动态创建组件 -->
                      <component :is="() => h('i', { class: menu.meta?.icon })" />
                    </el-icon>
                    <!-- 当菜单未折叠时显示菜单标题 -->
                    <span v-if="!isCollapsed">{{ menu.meta?.title }}</span>
                  </NuxtLink>
                </el-menu-item>
              </template>
            </el-menu>
          </el-aside>

          <el-main>
            <slot />
          </el-main>
        </el-container>
      </el-container>
    </ClientOnly>
  </div>
</template>

<style lang="scss">
/* 可以添加一些样式来优化折叠后的效果 */
.el-menu.el-menu--collapse {
  width: 64px;
}
</style>
